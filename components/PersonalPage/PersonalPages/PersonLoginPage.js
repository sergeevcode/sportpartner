import styles from './PersonalPages.module.css';
import Button from '../../Button/Button';
import { observer } from "mobx-react-lite";
import { useState } from 'react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

import user from '../../../store/user';
import { API_URL } from '../../../constants';
import { TOAST_OPTIONS } from '../../../lib/constants';

import TextLink from '../../TextLink/TextLink';

export default observer(function PersonLoginPage() {
    const [login, setLogin] = useState('');
    const [password, setPassword] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    const formHandler = (form) => {
        form.preventDefault();

        const formData = new FormData();
        formData.append('login', login);
        formData.append('password', password);
        setIsLoading(true);

        const fetchData = async () => {
            const data = await fetch(`/api/login`, {
                method: 'POST',
                body: JSON.stringify({ login, password })
            });
            const json = await data.json();
            console.log(json);

            if (!json.isLoggedIn && json.data.TYPE && json.data.TYPE === 'ERROR') {
                toast.error(json.data.MESSAGE.replace(/<\/?[a-zA-Z]+>/gi, ''), TOAST_OPTIONS);
                setIsLoading(false);
            } else if (json.isLoggedIn && json.user) {
                toast.success('üëç –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å', TOAST_OPTIONS);
                user.setIsAuthorized(true);
                user.setUserInfo({
                    id: json.user.id,
                    firstName: json.user.first_name,
                    lastName: json.user.last_name,
                    email: json.user.email,
                    token: json.user.token,
                });
                setIsLoading(false);
            }
        }

        fetchData()
            .catch((e) => {
                console.log(e);
                toast.warning('–ü–æ—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑', TOAST_OPTIONS);
            });
    };

    return (
        <>
            <div className='row justify-content-center'>
                <div className='col-2'>
                    <form action="" onSubmit={(form) => formHandler(form)} className={styles.authForm}>
                        <h1 className={styles.authTitle}>–í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>

                        <div className="form-field">
                            <label htmlFor="login">–õ–æ–≥–∏–Ω:</label>
                            <input
                                type="text"
                                id="login"
                                value={login}
                                onChange={(e) => setLogin(e.target.value)}
                            />
                        </div>
                        <div className="form-field">
                            <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
                            <input
                                type="password"
                                id="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                            />
                        </div>

                        <div
                            style={{
                                opacity: isLoading ? '0.3' : '1',
                                pointerEvents: isLoading ? 'none' : 'auto',
                            }}
                        >
                            <Button
                                text={isLoading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : '–í–æ–π—Ç–∏'}
                                onClick={() => console.log('oh, shit! Here we go again!')}
                                fullWidth
                            />
                        </div>

                        <div className='d-flex justify-content-center'>
                            <TextLink href="#" text="–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" style={{ margin: '30px 0 0 0' }} />
                        </div>
                    </form>
                </div>
            </div>
        </>
    );
});